docker ps : see the running containers or processes 
docker ps -a | grep c1: see the c1 container is running or not

docker run -it name_of_the_image: start a container from an image
docker run -it name_of_the_image sh: start a container from an image with sh
docker run react-app: it will start a container with the default command
docker run -d react-app: it will start container with the default command but it will be in the background with a random name
docker run -d --name blue-sky react-app: it is like above command and it's name gonna be blue-sky
docker run -d -p 80:3000 --name blue-sky react-app: runs the container and open the 80 port in host(we can see the server on localhost:80)
docker run -d -p 80:3000 -v app-data:/app/data react-app: start container with volume (-v) app-data in the /app/data directory: if we delete this container /app/data still remians
docker run -d -p 5001:3000 -v $(pwd):/app react-app : in this way if we change the files in the computer , the container will change too.

docker exec -it <container name> sh: run a command in the existing container

docker stop <container name>: stop the container
docker start <container name>: start the container

docker container rm <container name>: remove the container
docker rm <container name>: remove the container and we can use -f option or we can stop the container and then remove it

docker build -t react-app .: creating image -t --> for tagging the image, . --> where it can find Dockerfile --> . means current dir
docker build -t react-app:3.6.1 : creating image -t --> for tagging the image, . --> where it can find Dockerfile --> . means current dir and 3.6.1 is TAG "we use this when we want to tag an image while creating it"

docker image tag react-app:image-id react-app:3.6.9 : in this way we tag an image after we build it or we can use the blow way
docker image tag <id of image> react-app:latest

docker images | docker image ls : shows all the images we have build

docker image prune
docker container prune: remove all the stopped container

docker image rm <name of the image > | <id of a image>
docker image remove react-app:3.6.1: removes the image with the tag

docker image tag <image id> amirhosseinx82/react-app:3.6.9 : create new image with this name <amirhosseinx82/react-app:3.6.9> and prepare to push
docker push amirhosseinx82/react-app:3.6.9

# sharing image without dockerhub
docker image save -o react-app.tar react-app:3 : we compress file
docker image load -i react-app.tar : we load the Docker file

docker logs <container id>: shows the log of the container
docker logs -f <container id>: shows the log of the container and it just update the log on the same time
docker logs -n 5 <container id: shows the 5 last line of the log
docker logs -t <container id>: shows the log with the time

docker volume create app-data: create volume and the name is app-data
docker volume inspect app-data: shows detail of app-data volume

docker cp <container id>:/app/logs.txt . : copy logs.txt in to the host 
docker cp secrect.txt <container id>:/app: copy secrect.txt in to the container

docker image rm $(docker image ls -q): removes all the images
docker container rm -f $(docker container ls -a -q): removes all the containers
